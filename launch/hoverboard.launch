<launch>
    <!-- Parameter contains path to robot model -->
    <param name="robot_description" command="$(find xacro)/xacro '$(find lumen)/urdf/lumen.xacro' --inorder"/>

    <!-- JointStates to 3D poses of the robot links -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
          respawn="false" output="screen"/>

    <!-- Hoverboard driver params -->
    <rosparam file="$(find hoverboard_driver)/config/hardware.yaml" command="load"/>
    <rosparam file="$(find hoverboard_driver)/config/controllers.yaml" command="load"/>

    <!-- Wheels states to JointStates -->
    <!-- Publish odometry to hoverboard_velocity_controller/odom -->
    <!-- Control robot from topic hoverboard_velocity_controller/cmd_vel -->
    <node name="hoverboard_driver" pkg="hoverboard_driver" type="hoverboard_driver" output="screen"/>
    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"
          args="hoverboard_joint_publisher hoverboard_velocity_controller"/>

    <!-- IMU -->
    <!-- Publish static transform from base_link to imu_link (rotate IMU -90 degrees)
    <node pkg="tf2_ros" type="static_transform_publisher" name="base_footprint_to_imu_link"
          args="0.1 0 0.61 -1.5707963267948966 0 0 base_footprint imu_link"/> -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="base_footprint_to_imu_link"
          args="0.028 0 0.634 0 0 0 base_footprint imu_link"/>

    <!-- Rosserial -->
    <node pkg="rosserial_server" type="socket_node" name="rosserial_server"/>

    <!-- EKF
    <include file="$(find hoverboard_driver)/launch/include/ekf.launch"/> -->

    <!-- PID
    <include file="$(find hoverboard_driver)/launch/include/pid.launch"/> -->

    <!-- WebSocket Server -->
    <include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch"/>
</launch>
